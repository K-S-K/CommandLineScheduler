@page "/cmd-log"
@using CLS.Common.DTO
@using CLS.Site.Services
@attribute [StreamRendering]

@inject ICLSAPIService CLSAPIService
@rendermode InteractiveServer

<PageTitle>@PageTitle</PageTitle>

<h1>@PageTitle</h1>

@if (commands == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Args</th>
            <th>Directory</th>
            <th>Status</th>
            <th>X</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var command in commands.Tasks)
            {
                <tr>
                    <td>@command.Name</td>
                    <td>@command.Arguments</td>
                    <td>@command.Directory</td>
                    <td>@command.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="@(async () => await CancelCommand(command.Id))">Cancel</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CommandTaskCollectionDto? commands;

    private string PageTitle { get; set; } = "Command queue";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        // Load the command list
        commands = await CLSAPIService.RequestCommandLog();
    }

    private async Task CancelCommand(Guid id)
    {
        PageTitle = "Cancelling command...";
        bool success = await CLSAPIService.RequestCommandEsc(id);

        if (success)
        {
            commands = await CLSAPIService.RequestCommandLog(); // Refresh the command list
            StateHasChanged();
        }
    }
}
